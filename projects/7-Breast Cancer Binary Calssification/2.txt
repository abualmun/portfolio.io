## 🏗️ Model Architecture

```python
class NeuralNetwork(nn.Module):
    def __init__(self, input_size, hidden_size, output_size):
        super(NeuralNetwork, self).__init__()
        self.fc1 = nn.Linear(input_size, hidden_size)
        self.relu = nn.ReLU()
        self.fc2 = nn.Linear(hidden_size, output_size)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        out = self.fc1(x)
        out = self.relu(out)
        out = self.fc2(out)
        out = self.sigmoid(out)
        return out
```

📐 **Hyperparameters**

* Input size: 30
* Hidden size: 128
* Output size: 1
* Learning rate: 0.001
* Epochs: 100

---

## 🏃‍♀️ Training Process

🛠️ The training flow includes:

* **📦 Data prep**: Load, split, scale, tensorify

* **🔁 Model loop**:

  * Forward → Loss → Backprop → Optimize
  * Log every 10 epochs

* **✅ Evaluation**:

  * Test set validation
  * Accuracy tracking


## 📷 Visualizations

### 🔍 Mean Smoothness

### 📊 Dataset Plot

### 📈 Data Count
